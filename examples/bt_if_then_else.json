{"_nodesData":[{"id":2,"text":"?"},{"id":3,"text":">"},{"id":4,"text":"if_condition1"},{"id":5,"text":"or_condition2"},{"id":6,"text":"then_run_task"},{"id":7,"text":"?"},{"id":8,"text":"else_run_task"}],"_edgesData":[{"id":"3-2","from":3,"to":2},{"id":"2-4","from":2,"to":4},{"id":"2-5","from":2,"to":5},{"id":"3-6","from":3,"to":6},{"id":"7-3","from":7,"to":3},{"id":"7-8","from":7,"to":8}],"_srcData":"const { BT_STATES, SuccessLoopNode, SequenceNode, ResetSequenceNode, SelectorNode, RunningLoopNode, ExecutionNode } = bt;\nclass MyTree {\n    a = 5;\n    b = 5;\n\n    //FUNC BEGIN\n    if_condition1() {\n        //CODE BEGIN\n        if (this.a < 5) return BT_STATES.SUCCESS;\n        return BT_STATES.FAILED;\n        //CODE END\n    };\n\n    or_condition2() {\n        //CODE BEGIN\n        if (this.b > 5) return BT_STATES.SUCCESS;\n        return BT_STATES.FAILED;\n        //CODE END\n    };\n\n    then_run_task() {\n        //CODE BEGIN\n        console.log('A < 5 OR B > 5');\n        return BT_STATES.SUCCESS;\n        //CODE END\n    };\n\n    else_run_task() {\n        //CODE BEGIN\n        console.log('A >= 5 OR B <= 5');\n        return BT_STATES.SUCCESS;\n        //CODE END\n    };\n    //FUNC END\n    //TREE BEGIN\n    tree = new SelectorNode([\n        new SequenceNode([\n            new SelectorNode([\n                new ExecutionNode(this.if_condition1, this),\n                new ExecutionNode(this.or_condition2, this)\n            ]),\n            new ExecutionNode(this.then_run_task, this)\n        ]),\n        new ExecutionNode(this.else_run_task, this)\n    ])\n    //TREE END\n}\nconst behaviorTree = new MyTree();\nconsole.log(behaviorTree.tree.tick());\n"}